// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ****************************
// ************ 유저 ***********
// ****************************

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique @db.VarChar(100)
  uid      String @unique @db.Text // 구글 uid
  socialId String @map("social_id") @db.Text

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz
  nickname  String    @db.VarChar(10)

  UserInfo    UserInfo?
  Onboarding  Onboarding?
  Resume      Resume[]
  Experiences Experience[]
  Capability  Capability[]

  @@map("user")
}

enum Provider {
  GOOGLE // 구글 로그인
  APPLE // 애플 로그인
  KAKAO // 카카오 로그인
}

// TODO 직무 모두 기입 필요
enum Field {
  DEVELOPMENT // 개발
  MANAGEMENT // 경영
  BUSINESS // 비즈니스
  MARKETING // 마케팅
  ADVERTISING // 광고
  DESIGN // 디자인
  SALES // 영업
  CUSTOMER_SERVICE // 고객 서비스
  RETAIL // 리테일
  GAME_PRODUCTION // 게임 제작
  MEDIA // 미디어
  HUMAN_RESOURCE // 인사
  ENGINEERING // 엔지니어링 & 설계
  FINANCE // 금융
  MANUFACTURING // 제조 & 생산
  MEDICAL // 의료
  BIO // 바이오
  LOGISTICS // 물류
  TRADE // 무역
  EDUCATION // 교육
  LAW // 법률
  CONSTRUCTION // 건설
  CIVIL_ENGINEERING // 토목
  PUBLIC_WELFARE // 공공 & 복지
}

model UserInfo {
  userId   Int       @id @map("user_id")
  field    Field? // 직무 분야
  provider Provider? // 소셜 로그인 제공자
  imageUrl String?   @map("image_url") @db.Text // 이미지 url

  User User @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@map("user_info")
}

// ****************************
// *********** 온보딩 ***********
// ****************************

// 회원가입 시 모든 온보딩 처리를 생성합니다.
model Onboarding {
  userId Int @id

  experience        Boolean @default(false) // 경험분해 온보딩 여부
  experienceStepper Boolean @default(false) @map("experience_stepper") // 경험분해 stepper 온보딩 여부
  resume            Boolean @default(false) // 자기소개서 작성 온보딩 여부
  collection        Boolean @default(false) // 모아보기 온보딩 여부

  User User @relation(references: [id], fields: [userId])

  @@map("onboarding")
}

// ****************************
// ********** 자기소개서 *********
// ****************************

// 자기소개서 제목
model Resume {
  id    Int    @id @default(autoincrement())
  title String @default("새 자기소개서") @db.VarChar(13) // 자기소개서 제목

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz

  userId Int @map("user_id")

  User     User       @relation(references: [id], fields: [userId], onDelete: Cascade)
  Question Question[]

  @@map("resume")
}

// ********************************
// ********** 자기소개서 문항 *********
// ********************************
model Question {
  id       Int @id @default(autoincrement())
  resumeId Int @map("resume_id") // 자기소개서 제목 pfk

  title  String? @db.VarChar(300) // 문항 제목
  answer String? @db.VarChar(2500) // 문항 내용

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz

  Resume Resume @relation(references: [id], fields: [resumeId], onDelete: Cascade)

  // @@id([resumeId])
  @@map("question")
}

// ********************************
// ******* 경험 in 경험 분해 *********
// ********************************

// 임시 저장이 있기에 모든 필드는 Nullable입니다.
model Experience {
  id Int @id @default(autoincrement()) @map("id") // 경험 id

  title     String?   @db.VarChar(50) // 경험 제목
  startDate DateTime? @map("start_date") @db.Date // 시작 날짜 type: YYYY-MM
  endDate   DateTime? @map("end_date") @db.Date // 끝 날짜 type: YYYY-MM

  experienceStatus ExperienceStatus @default(INPROGRESS) // 경험 분해 진행 척도 디폴트 inprogress

  situation String? @db.VarChar(100) // S: Situation, 계기와 배경
  task      String? @db.VarChar(100) // T: Task, 과제 및 목표
  action    String? @db.VarChar(100) // A: Action, 행동
  result    String? @db.VarChar(100) // R: Result, 결과

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz

  userId Int @map("user_id")

  User                 User?                  @relation(references: [id], fields: [userId], onDelete: Cascade)
  ExperienceInfo       ExperienceInfo?
  ExperienceSummary    ExperienceSummary[]
  ExperienceCapability ExperienceCapability[]

  @@map("experience")
}

// 경험 분해 진행 상태
enum ExperienceStatus {
  INPROGRESS // 진행중
  DONE // 끝
}

// ********************************
// *********** 역량 키워드 ***********
// ********************************
model ExperienceSummary {
  experienceId Int    @id @map("experience_id")
  keyword      String @db.VarChar(10) // 키워드 이름

  Experience Experience @relation(references: [id], fields: [experienceId])

  @@map("experience_summary")
}

// ********************************
// *********** 경험 정보 ************
// ********************************
// 임시 저장이 있기에 모든 필드는 Nullable입니다.
model ExperienceInfo {
  id Int @default(autoincrement()) @map("experience_info_id")

  experienceRole String? @map("experience_role") @db.VarChar(20) // 경험 나의 역할
  motivation     String? @db.VarChar(100) // 경험 수행 이유
  utilization    String? @db.VarChar(100) // 역량 활용
  analysis       String? @db.VarChar(160) // AI 분석

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz

  experienceId Int        @id @map("experience_id") // 경험 id
  experience   Experience @relation(references: [id], fields: [experienceId])

  @@map("experience_info")
}

// ********************************
// ************* 역량 **************
// ********************************

model Capability {
  id      Int    @id @default(autoincrement()) // 역량 id
  keyword String @db.VarChar(7) // 역량 키워드

  userId Int @map("user_id")

  User                 User                   @relation(references: [id], fields: [userId], onDelete: Cascade)
  ExperienceCapability ExperienceCapability[]

  @@map("capability")
}

model ExperienceCapability {
  experienceId Int @map("experience_id")
  capabilityId Int @map("capability_id")

  Experience Experience @relation(references: [id], fields: [experienceId])
  Capability Capability @relation(references: [id], fields: [capabilityId])

  @@id([experienceId, capabilityId])
  @@map("experience_capability")
}

// *******************************
// ************ 피드백 *************
// *******************************

model Feedback {
  id       Int    @id @default(autoincrement())
  contents String @db.VarChar(300)

  createdAt DateTime @default(now()) @map("createdAt") @db.Timestamptz

  @@map("feedback")
}
